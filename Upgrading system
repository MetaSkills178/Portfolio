------------------------------------------------------- LOCAL SCRIPT -----------------------------------------------------------------

local player = game.Players.LocalPlayer
local numberFormatter = require(game.ReplicatedStorage.numberFormatter)
local remote = game.ReplicatedStorage.Remotes.UpgradeStorage

local UIlevel = player.PlayerGui.Upgrade.Frame.ScrollingFrame.storage.Frame.Frame
local displayUpgrades = {UIlevel.lvl1, UIlevel.lvl2, UIlevel.lvl3, UIlevel.lvl4, UIlevel.lvl5}
local upgradeButton = UIlevel.Parent.Parent.upgradeButton
local necessaryGems = upgradeButton.Parent.Frame.display

local Upgrade = player:WaitForChild("Upgrade")
local storageUpgrade = Upgrade:WaitForChild("upgradeStorage")
local gems = player.leaderstats:WaitForChild("gems")

local price = {1000, 2500, 5000, 10000, "MAX"}

function changeColor()
	for i, upgrade in ipairs(displayUpgrades)  do
		if storageUpgrade.Value == i then
			upgrade.ImageColor3 =  Color3.fromRGB(30, 255, 50)
			necessaryGems.Text = numberFormatter.Format(price[i]) or "MAX"
		end
	end
end


changeColor()

storageUpgrade.Changed:Connect(function()
	changeColor()
end)

upgradeButton.MouseButton1Click:Connect(function()
	remote:InvokeServer()
	changeColor()
end)

------------------------------------------------------- SERVER SCRIPT -----------------------------------------------------------------

local serverScriptService = game:GetService("ServerScriptService")
local dataManager = require(serverScriptService:WaitForChild("Modules"):WaitForChild("DataManager"))
local remote = game.ReplicatedStorage.Remotes.UpgradeStorage


remote.OnServerInvoke = function(player)
	local profile = dataManager.Profiles[player]
	local Upgrade = player:WaitForChild("Upgrade")
	local storageUpgrade = Upgrade:WaitForChild("upgradeStorage")
	local gems = player.leaderstats:WaitForChild("gems")
	local maxStorage = player.Storage:WaitForChild("maxStorage")
	
	local requiredGems = {500, 1000, 2500, 5000, 10000}
	local reward = {10, 20, 30, 50, 75}
	
	
	for i, u in pairs(requiredGems)  do
		if storageUpgrade.Value == i-1 and gems.Value >= u then
			profile.Data.gems = profile.Data.gems - u
			gems.Value = profile.Data.gems
			profile.Data.upgradeStorage = i
			storageUpgrade.Value = profile.Data.upgradeStorage
			profile.Data.maxStorage += reward[i]
			maxStorage.Value = profile.Data.maxStorage
			return
		end
	end
	
end
